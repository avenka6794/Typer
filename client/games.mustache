<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <meta charset="utf-8">
    <title>Typer</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
</head>

<body>
    <div id="user">
        <h1> Player: <span class="username">{{ user }} </span> </h1> <button type="button" class="btn btn-primary ready">Ready Up</button></div>
    <div class="score"></div>
    <div class="text"></div>
    <div class="timer"></div>
    <div id="snackbar"></div>
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>Results</h2>
            </div>
            <div class="modal-body">

            </div>
        </div>

    </div>
    <style media="screen">
        body {
            background: #f5f5f5;
            font-family: "Roboto", sans-serif;
            margin: 20px;
        }

        #user {
            margin: 25px;
        }

        .progress {
            width: 80%;
            margin: 0 auto;
            background: black;
        }

        .timer {
            width: 80%;
            display: block;
            margin: 0 auto;
            text-align: center;
            font-size: 59px;
            margin-top: 25px;
        }

        .text {
            width: 80%;
            font-size: 38px;
            border: 1px solid rgb(97, 116, 180);
            display: none;
            margin: 0 auto;
        }

        .color {
            color: rgb(97, 116, 180);
            display: inline;
        }

        .bar {
            height: 35px;
            margin-bottom: -5px;
            width: 1px;
            background: black;
            display: inline-block;
            animation: blink-animation 1s steps(5, start) infinite;
        }

        @keyframes blink-animation {
            to {
                visibility: hidden;
            }
        }

        @-webkit-keyframes blink-animation {
            to {
                visibility: hidden;
            }
        }

        .score {
            margin-bottom: 20px;
        }

        .modal {
            display: none;
            /* Hidden by default */
            position: fixed;
            /* Stay in place */
            z-index: 1;
            /* Sit on top */
            padding-top: 100px;
            /* Location of the box */
            left: 0;
            top: 0;
            width: 100%;
            /* Full width */
            height: 100%;
            /* Full height */
            overflow: auto;
            /* Enable scroll if needed */
            background-color: rgb(0, 0, 0);
            /* Fallback color */
            background-color: rgba(0, 0, 0, 0.4);
            /* Black w/ opacity */
        }

        /* Modal Content */

        .modal-content {
            position: relative;
            background-color: #fefefe;
            margin: auto;
            padding: 0;
            border: 1px solid #888;
            width: 80%;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            -webkit-animation-name: animatetop;
            -webkit-animation-duration: 0.4s;
            animation-name: animatetop;
            animation-duration: 0.4s
        }

        /* Add Animation */

        @-webkit-keyframes animatetop {
            from {
                top: -300px;
                opacity: 0
            }
            to {
                top: 0;
                opacity: 1
            }
        }

        @keyframes animatetop {
            from {
                top: -300px;
                opacity: 0
            }
            to {
                top: 0;
                opacity: 1
            }
        }

        /* The Close Button */

        .close {
            color: white;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-header {
            padding: 2px 16px;
            background-color: #5cb85c;
            color: white;
        }

        .modal-body {
            padding: 2px 16px;
        }

        .modal-footer {
            padding: 2px 16px;
            background-color: #5cb85c;
            color: white;
        }
        #snackbar {
    visibility: hidden;
    min-width: 250px;
    margin-left: -125px;
    background-color: #333;
    color: #fff;
    text-align: center;
    border-radius: 2px;
    padding: 16px;
    position: fixed;
    z-index: 1;
    left: 50%;
    bottom: 30px;
    font-size: 17px;
}

#snackbar.show {
    visibility: visible;
    -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
    animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

@-webkit-keyframes fadein {
    from {bottom: 0; opacity: 0;}
    to {bottom: 30px; opacity: 1;}
}

@keyframes fadein {
    from {bottom: 0; opacity: 0;}
    to {bottom: 30px; opacity: 1;}
}

@-webkit-keyframes fadeout {
    from {bottom: 30px; opacity: 1;}
    to {bottom: 0; opacity: 0;}
}

@keyframes fadeout {
    from {bottom: 30px; opacity: 1;}
    to {bottom: 0; opacity: 0;}
}
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script type="text/javascript">
        var socket = io('/gameSpace');

        //auxiliary
        function getParameterByName(name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }

        function toast() {
            var x = document.getElementById("snackbar");
            x.className = "show";
            setTimeout(function() {
                x.className = x.className.replace("show", "");
            }, 3000);
        }

        socket.on("connect", () => {

            socket.emit("join room", {
                id: getParameterByName("q"),
                user: socket.id,
                username:$(".username").html()
            });

            socket.on('msg', (data) => {
                $("#snackbar").html(data);
                toast();
            })

            socket.on("finished", (data) => {
                var playerIndex = data.game.players.findIndex((player) => {
                    return player.user == socket.id;
                })

                var modal = document.getElementById('myModal');

                var span = document.getElementsByClassName("close")[0];

                span.onclick = function() {
                    modal.style.display = "none";
                }

                window.onclick = function(event) {
                    if (event.target == modal) {
                        modal.style.display = "none";
                    }
                }

                if (playerIndex == data.winner) {
                    //user wins
                    $(".modal-body").html("<h1>You Win!</h1>")
                    modal.style.display = "block";
                } else {
                    //user loses
                    $(".modal-body").html("<h1>Sorry, You Lost!</h1>")
                    modal.style.display = "block";
                }
            })

            socket.on("score", (data) => {
                $(".score").empty();
                for (var i = 0; i < data.players.length; i++) {
                    var user = data.players[i].user
                    if (user == socket.id) {
                        user = "(You)"
                    } else {
                        user = "Player" + (i + 1);
                    }
                    $(".score").append(
                        `<div class="container">
  <table style="width:100%" border="1">
    <tr>
    <th style="width: 25%; padding: 13px;"><span>${user} - Ready: ${data.players[i].ready}</span></th>
    <th>  <div class="progress">
    <div class="progress-bar" role="progressbar" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100" style="width:${data.players[i].score}%">
      <span class="sr-only">70% Complete</span>
    </div>
  </div></th>

  </tr>
    </table>


</div>`
                    )
                }
            })

            $(".ready").click(function() {
                socket.emit("player ready", {
                    id: getParameterByName("q"),
                    user: socket.id
                })
            })

            socket.on("start game", (data) => {
                //timer
                var counter = 5;
                var timer = setInterval(function() {
                    if (counter > -1) {
                        $(".timer").html(counter);
                        counter--;
                    } else {
                        clearInterval(timer);
                        $(".timer").remove();
                        $(".ready").remove();
                        $(".text").css("display", "table")
                        //start game
                        var text = data.words.join(" ");


                        var textIndex = 0;
                        var inc = (100 / text.length);
                        $(".text").html(text);

                        $(document).keypress(function(e) {

                            var keyCode = e.keyCode;
                            var textCode = text.charCodeAt(textIndex);
                            if (keyCode == textCode) {

                                $(".bar").css("background", "green")
                                var score = textIndex * inc
                                if (textIndex == text.length - 1) {
                                    score = 100;
                                }
                                socket.emit("update score", {
                                    id: getParameterByName("q"),
                                    user: socket.id,
                                    score: score
                                })
                                var temp = "<div class='color'>" + text.substring(0, textIndex + 1) + "</div>" + "<div class='bar'></div>" + text.substring(textIndex + 1, text.length);
                                $(".text").html(temp)
                                textIndex++;
                            } else {
                                $(".bar").css("background", "red")
                            }
                        })
                    }
                }, 1000)
            })




        })
    </script>
</body>

</html>
